// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yani.Models.Database;

#nullable disable

namespace Yani.Migrations
{
    [DbContext(typeof(BeShopContext))]
    partial class BeShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Persian_100_CI_AI")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Yani.Models.Database.Attachments", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("Size")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId")
                        .HasName("PK__Attachme__442C64DEF43770EC");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Yani.Models.Database.BlogAttachments", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    b.HasKey("BlogId", "AttachmentId")
                        .HasName("PK__BlogAtta__A075581D30129C4A");

                    b.HasIndex("AttachmentId");

                    b.HasIndex(new[] { "BlogId" }, "idx_BlogAttachments_BlogID");

                    b.ToTable("BlogAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.Blogs", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BlogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("BlogId")
                        .HasName("PK__Blogs__54379E503030D176");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReviewId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Yani.Models.Database.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("BrandId")
                        .HasName("PK__Brand__DAD4F3BE5835F902");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Yani.Models.Database.CartItems", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId")
                        .HasName("PK__CartItem__488B0B2A3133811A");

                    b.HasIndex(new[] { "CartId" }, "idx_CartItems_CartID");

                    b.HasIndex(new[] { "ProductId" }, "idx_CartItems_ProductID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Yani.Models.Database.Carts", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CartID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Carts__51BCD797CEA5AF88");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Yani.Models.Database.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("CategoryId")
                        .HasName("PK__Categori__19093A2B46C66ECE");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Yani.Models.Database.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    b.HasKey("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Yani.Models.Database.Coupons", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CouponId"));

                    b.Property<bool>("AppliesToCategories")
                        .HasColumnType("bit");

                    b.Property<bool>("AppliesToProducts")
                        .HasColumnType("bit");

                    b.Property<string>("CouponCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DiscountPercent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxUses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("Uses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("CouponId")
                        .HasName("PK__Coupons__384AF1DA122B4B32");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("Yani.Models.Database.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("IngredientId")
                        .HasName("PK__Ingredie__BEAEB27A7D7FA4BD");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("Yani.Models.Database.Inventory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Inventor__B40CC6EDA66E2B10");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Yani.Models.Database.LanguageTranslations", b =>
                {
                    b.Property<int>("LanguageTranslationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageTranslationID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageTranslationId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    b.Property<string>("TranslationKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TranslationValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("LanguageTranslationId")
                        .HasName("PK__Language__28DA87CD087AA4A1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("LanguageTranslations");
                });

            modelBuilder.Entity("Yani.Models.Database.Languages", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LanguageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B938558BA0DE9954");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Yani.Models.Database.Logs", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Related")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("LogId")
                        .HasName("PK__Logs__5E5499A8E79F50BA");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Yani.Models.Database.OrderItems", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderItemID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("OrderItemId")
                        .HasName("PK__OrderIte__57ED06A18CD78F49");

                    b.HasIndex(new[] { "OrderId" }, "idx_OrderItems_OrderID");

                    b.HasIndex(new[] { "ProductId" }, "idx_OrderItems_ProductID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Yani.Models.Database.OrderStatuses", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrderStatusDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("OrderStatusId")
                        .HasName("PK__OrderSta__BC674F4182E369BA");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Yani.Models.Database.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<DateTime?>("DeliveredDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("OrderStatusID");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("TrackingNumber")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF5531CA13");

                    b.HasIndex("AddressId");

                    b.HasIndex("CouponId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex(new[] { "OrderStatusId" }, "idx_Orders_OrderStatusID");

                    b.HasIndex(new[] { "UserId" }, "idx_Orders_UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Yani.Models.Database.PaymentMethods", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentMethodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethodDetails")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethodName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK__PaymentM__DC31C1F3691FB6F4");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Yani.Models.Database.ProductAttachments", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    b.HasKey("ProductId", "AttachmentId")
                        .HasName("PK__ProductA__404E00A02BCD1033");

                    b.HasIndex("AttachmentId");

                    b.HasIndex(new[] { "ProductId" }, "idx_ProductAttachments_ProductID");

                    b.ToTable("ProductAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.HasKey("ProductId", "IngredientId")
                        .HasName("PK__ProductI__0FE62DCA9773D289");

                    b.HasIndex(new[] { "IngredientId" }, "idx_ProductIngredient_IngredientID");

                    b.HasIndex(new[] { "ProductId" }, "idx_ProductIngredient_ProductID");

                    b.ToTable("ProductIngredient");
                });

            modelBuilder.Entity("Yani.Models.Database.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("BrandID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ScentNoteId")
                        .HasColumnType("int")
                        .HasColumnName("ScentNoteID");

                    b.Property<int>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    b.Property<int>("SubcategoryId")
                        .HasColumnType("int")
                        .HasColumnName("SubcategoryID");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Products__B40CC6ED8E17D7BE");

                    b.HasIndex("BrandId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ScentNoteId");

                    b.HasIndex("SizeId");

                    b.HasIndex("SubcategoryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Yani.Models.Database.RefundStatuses", b =>
                {
                    b.Property<int>("RefundStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefundStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundStatusId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RefundStatusDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RefundStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RefundStatusId")
                        .HasName("PK__RefundSt__CFFDB048E1D099A1");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("RefundStatuses");
                });

            modelBuilder.Entity("Yani.Models.Database.Refunds", b =>
                {
                    b.Property<int>("RefundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RefundID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RefundId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("RefundAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RefundStatusId")
                        .HasColumnType("int")
                        .HasColumnName("RefundStatusID");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("RefundId")
                        .HasName("PK__Refunds__725AB9007E0832F7");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("OrderId");

                    b.HasIndex("RefundStatusId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("Yani.Models.Database.ReviewAttachments", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int")
                        .HasColumnName("AttachmentID");

                    b.HasKey("ReviewId", "AttachmentId")
                        .HasName("PK__ReviewAt__80FEBFE306DAD862");

                    b.HasIndex("AttachmentId");

                    b.HasIndex(new[] { "ReviewId" }, "idx_ReviewAttachments_ReviewID");

                    b.ToTable("ReviewAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.Reviews", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<byte?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((5))");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Reviews__74BC79AEC7DF1A33");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Yani.Models.Database.ScentNote", b =>
                {
                    b.Property<int>("ScentNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ScentNoteID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScentNoteId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ScentNoteName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ScentNoteId")
                        .HasName("PK__ScentNot__866807A1516DB2D5");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ScentNote");
                });

            modelBuilder.Entity("Yani.Models.Database.Settings", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SettingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SettingId")
                        .HasName("PK__Settings__54372AFD005779E4");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Yani.Models.Database.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SizeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SizeId")
                        .HasName("PK__Size__83BD095A337F550F");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Size");
                });

            modelBuilder.Entity("Yani.Models.Database.Sms", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(0)
                        .HasColumnType("datetime2(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("MessageId")
                        .HasName("PK__SMS__C87C0C9C8773DDD3");

                    b.ToTable("SMS");
                });

            modelBuilder.Entity("Yani.Models.Database.States", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StateID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("StateId");

                    b.HasIndex(new[] { "StateName" }, "UQ_States_State")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Yani.Models.Database.Subcategories", b =>
                {
                    b.Property<int>("SubcategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SubcategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubcategoryId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SubcategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SubcategoryId")
                        .HasName("PK__Subcateg__9C4E707D95735403");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Subcategories");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportCategories", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("CategoryId")
                        .HasName("PK__SupportC__19093A2BD4669AFD");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SupportCategories");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportMessages", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Message")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("MessageId")
                        .HasName("PK__SupportM__C87C037CA77CC6D5");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TicketId" }, "idx_SupportMessages_TicketID");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTicketStatuses", b =>
                {
                    b.Property<int>("SupportTicketStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupportTicketStatusID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupportTicketStatusId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SupportTicketStatusDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SupportTicketStatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("SupportTicketStatusId")
                        .HasName("PK__SupportT__2381ADD32BD34D2A");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SupportTicketStatuses");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTickets", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<bool?>("IsTicketOpen")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("SupportTicketStatusId")
                        .HasColumnType("int")
                        .HasColumnName("SupportTicketStatusID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TicketId")
                        .HasName("PK__SupportT__712CC627E58A9D9C");

                    b.HasIndex("AdminId");

                    b.HasIndex(new[] { "CategoryId" }, "idx_SupportTickets_CategoryID");

                    b.HasIndex(new[] { "SupportTicketStatusId" }, "idx_SupportTickets_SupportTicketStatusID");

                    b.HasIndex(new[] { "UserId" }, "idx_SupportTickets_UserID");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Yani.Models.Database.UserAddresses", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AddressId")
                        .HasName("PK__UserAddr__091C2A1B3AA083C8");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "UserId" }, "idx_UserAddresses_UserID");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Yani.Models.Database.UserGroups", b =>
                {
                    b.Property<int>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserGroupId"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("GroupName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ListPermission")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('*')");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserGroupId")
                        .HasName("PK__UserGrou__FA5A61E004416180");

                    b.HasIndex(new[] { "GroupName" }, "UQ__UserGrou__6EFCD434725CDDB1")
                        .IsUnique()
                        .HasFilter("[GroupName] IS NOT NULL");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Yani.Models.Database.UserLogin", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAccountVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordExpired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHistory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwoFactorBackupCodes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("TwoFactorSecretKey")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("UserGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserGroupID")
                        .HasDefaultValueSql("((2))");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LoginId")
                        .HasName("PK__UserLogi__4DDA2838463D6640");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Username" }, "UQ__UserLogi__536C85E4E6094AF7")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.HasIndex(new[] { "Phone" }, "UQ__UserLogi__5C7E359E8BC903F0")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__UserLogi__A9D10534A5BCE241")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Yani.Models.Database.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCAC48CA5854");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Yani.Models.Database.WebsiteVisitors", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VisitorID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("Ipaddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("IPAddress");

                    b.Property<string>("PageVisited")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime");

                    b.HasKey("VisitorId")
                        .HasName("PK__WebsiteV__B121AFA8E001BD90");

                    b.HasIndex("UserId");

                    b.ToTable("WebsiteVisitors");
                });

            modelBuilder.Entity("Yani.Models.Database.Attachments", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("AttachmentsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Attachmen__Creat__3F3159AB");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("AttachmentsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Attachmen__Updat__40257DE4");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.BlogAttachments", b =>
                {
                    b.HasOne("Yani.Models.Database.Attachments", "Attachment")
                        .WithMany("BlogAttachments")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK__BlogAttac__Attac__4B973090");

                    b.HasOne("Yani.Models.Database.Blogs", "Blog")
                        .WithMany("BlogAttachments")
                        .HasForeignKey("BlogId")
                        .IsRequired()
                        .HasConstraintName("FK__BlogAttac__BlogI__4AA30C57");

                    b.Navigation("Attachment");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Yani.Models.Database.Blogs", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("BlogsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Blogs__CreatedBy__284DF453");

                    b.HasOne("Yani.Models.Database.Reviews", "Review")
                        .WithMany("Blogs")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK_Blogs_Reviews");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("BlogsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Blogs__UpdatedBy__2759D01A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Review");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Brand", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("BrandCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Brand__CreatedBy__36D11DD4");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("BrandUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Brand__UpdatedBy__35DCF99B");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.CartItems", b =>
                {
                    b.HasOne("Yani.Models.Database.Carts", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItems__CartI__02284B6B");

                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__CartItems__Produ__031C6FA4");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Yani.Models.Database.Carts", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Carts__UserID__7F4BDEC0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.Categories", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("CategoriesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Categorie__Creat__51851410");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("CategoriesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Categorie__Updat__5090EFD7");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Cities", b =>
                {
                    b.HasOne("Yani.Models.Database.States", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Cities_States");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Yani.Models.Database.Coupons", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("CouponsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Coupons__Created__789EE131");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("CouponsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Coupons__Updated__77AABCF8");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Ingredient", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("IngredientCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Ingredien__Creat__4AD81681");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("IngredientUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Ingredien__Updat__49E3F248");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Inventory", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("InventoryCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Creat__6C390A4C");

                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithOne("Inventory")
                        .HasForeignKey("Yani.Models.Database.Inventory", "ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__Inventory__Produ__6D2D2E85");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("InventoryUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Inventory__Updat__6B44E613");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Product");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.LanguageTranslations", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("LanguageTranslationsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__LanguageT__Creat__0BE6BFCF");

                    b.HasOne("Yani.Models.Database.Languages", "Language")
                        .WithMany("LanguageTranslations")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK__LanguageT__Langu__0CDAE408");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("LanguageTranslationsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__LanguageT__Updat__0AF29B96");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Language");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.OrderItems", b =>
                {
                    b.HasOne("Yani.Models.Database.Orders", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__Order__116A8EFB");

                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__OrderItem__Produ__125EB334");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Yani.Models.Database.OrderStatuses", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("OrderStatusesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__OrderStat__Creat__77DFC722");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("OrderStatusesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__OrderStat__Updat__76EBA2E9");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Orders", b =>
                {
                    b.HasOne("Yani.Models.Database.UserAddresses", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__AddressI__08D548FA");

                    b.HasOne("Yani.Models.Database.Coupons", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK__Orders__CouponID__0BB1B5A5");

                    b.HasOne("Yani.Models.Database.OrderStatuses", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__OrderSta__0ABD916C");

                    b.HasOne("Yani.Models.Database.PaymentMethods", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__PaymentM__09C96D33");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__UserID__0CA5D9DE");

                    b.Navigation("Address");

                    b.Navigation("Coupon");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.PaymentMethods", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("PaymentMethodsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__PaymentMe__Creat__7132C993");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("PaymentMethodsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__PaymentMe__Updat__703EA55A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.ProductAttachments", b =>
                {
                    b.HasOne("Yani.Models.Database.Attachments", "Attachment")
                        .WithMany("ProductAttachments")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductAt__Attac__43F60EC8");

                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithMany("ProductAttachments")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductAt__Produ__4301EA8F");

                    b.Navigation("Attachment");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Yani.Models.Database.ProductIngredient", b =>
                {
                    b.HasOne("Yani.Models.Database.Ingredient", "Ingredient")
                        .WithMany("ProductIngredient")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIn__Ingre__7C6F7215");

                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithMany("ProductIngredient")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK__ProductIn__Produ__7B7B4DDC");

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Yani.Models.Database.Products", b =>
                {
                    b.HasOne("Yani.Models.Database.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__BrandI__60C757A0");

                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("ProductsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Products__Create__5FD33367");

                    b.HasOne("Yani.Models.Database.ScentNote", "ScentNote")
                        .WithMany("Products")
                        .HasForeignKey("ScentNoteId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__ScentN__61BB7BD9");

                    b.HasOne("Yani.Models.Database.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__SizeID__62AFA012");

                    b.HasOne("Yani.Models.Database.Subcategories", "Subcategory")
                        .WithMany("Products")
                        .HasForeignKey("SubcategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Products__Subcat__63A3C44B");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("ProductsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Products__Update__5EDF0F2E");

                    b.Navigation("Brand");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("ScentNote");

                    b.Navigation("Size");

                    b.Navigation("Subcategory");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.RefundStatuses", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("RefundStatusesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__RefundSta__Creat__7E8CC4B1");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("RefundStatusesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__RefundSta__Updat__7D98A078");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Refunds", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("RefundsCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Refunds__Created__190BB0C3");

                    b.HasOne("Yani.Models.Database.Orders", "Order")
                        .WithMany("Refunds")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Refunds__OrderID__19FFD4FC");

                    b.HasOne("Yani.Models.Database.RefundStatuses", "RefundStatus")
                        .WithMany("Refunds")
                        .HasForeignKey("RefundStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__Refunds__RefundS__1AF3F935");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("RefundsUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Refunds__Updated__18178C8A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Order");

                    b.Navigation("RefundStatus");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.ReviewAttachments", b =>
                {
                    b.HasOne("Yani.Models.Database.Attachments", "Attachment")
                        .WithMany("ReviewAttachments")
                        .HasForeignKey("AttachmentId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewAtt__Attac__47C69FAC");

                    b.HasOne("Yani.Models.Database.Reviews", "Review")
                        .WithMany("ReviewAttachments")
                        .HasForeignKey("ReviewId")
                        .IsRequired()
                        .HasConstraintName("FK__ReviewAtt__Revie__46D27B73");

                    b.Navigation("Attachment");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Yani.Models.Database.Reviews", b =>
                {
                    b.HasOne("Yani.Models.Database.Products", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Products");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviews_Users");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.ScentNote", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("ScentNoteCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__ScentNote__Creat__3D7E1B63");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("ScentNoteUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__ScentNote__Updat__3C89F72A");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Size", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("SizeCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Size__CreatedBy__442B18F2");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("SizeUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Size__UpdatedBy__4336F4B9");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.Subcategories", b =>
                {
                    b.HasOne("Yani.Models.Database.Categories", "Category")
                        .WithMany("Subcategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Subcatego__Categ__592635D8");

                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("SubcategoriesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__Subcatego__Creat__5832119F");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("SubcategoriesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Subcatego__Updat__573DED66");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportCategories", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("SupportCategoriesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__SupportCa__Creat__2FEF161B");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("SupportCategoriesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__SupportCa__Updat__2EFAF1E2");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportMessages", b =>
                {
                    b.HasOne("Yani.Models.Database.SupportTickets", "Ticket")
                        .WithMany("SupportMessages")
                        .HasForeignKey("TicketId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportMessages_SupportTickets");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("SupportMessages")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportMessages_Users");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTicketStatuses", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("SupportTicketStatusesCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .IsRequired()
                        .HasConstraintName("FK__SupportTi__Creat__0539C240");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("SupportTicketStatusesUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__SupportTi__Updat__04459E07");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTickets", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "Admin")
                        .WithMany("SupportTicketsAdmin")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportTickets_Admins");

                    b.HasOne("Yani.Models.Database.SupportCategories", "Category")
                        .WithMany("SupportTickets")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportTickets_SupportCategories");

                    b.HasOne("Yani.Models.Database.SupportTicketStatuses", "SupportTicketStatus")
                        .WithMany("SupportTickets")
                        .HasForeignKey("SupportTicketStatusId")
                        .IsRequired()
                        .HasConstraintName("FK__SupportTi__Suppo__33BFA6FF");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("SupportTicketsUser")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_SupportTickets_Users");

                    b.Navigation("Admin");

                    b.Navigation("Category");

                    b.Navigation("SupportTicketStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.UserAddresses", b =>
                {
                    b.HasOne("Yani.Models.Database.Cities", "City")
                        .WithMany("UserAddresses")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK__UserAddre__CityI__10AB74EC");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserAddre__UserI__0FB750B3");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.UserLogin", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "CreatedByNavigation")
                        .WithMany("UserLoginCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__UserLogin__Creat__795DFB40");

                    b.HasOne("Yani.Models.Database.Users", "UpdatedByNavigation")
                        .WithMany("UserLoginUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__UserLogin__Updat__7869D707");

                    b.HasOne("Yani.Models.Database.UserGroups", "UserGroup")
                        .WithMany("UserLogin")
                        .HasForeignKey("UserGroupId")
                        .HasConstraintName("FK__UserLogin__UserG__7775B2CE");

                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("UserLoginUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__UserLogin__UserI__7A521F79");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("User");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Yani.Models.Database.WebsiteVisitors", b =>
                {
                    b.HasOne("Yani.Models.Database.Users", "User")
                        .WithMany("WebsiteVisitors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__WebsiteVi__UserI__4E739D3B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yani.Models.Database.Attachments", b =>
                {
                    b.Navigation("BlogAttachments");

                    b.Navigation("ProductAttachments");

                    b.Navigation("ReviewAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.Blogs", b =>
                {
                    b.Navigation("BlogAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Yani.Models.Database.Carts", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Yani.Models.Database.Categories", b =>
                {
                    b.Navigation("Subcategories");
                });

            modelBuilder.Entity("Yani.Models.Database.Cities", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("Yani.Models.Database.Coupons", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Yani.Models.Database.Ingredient", b =>
                {
                    b.Navigation("ProductIngredient");
                });

            modelBuilder.Entity("Yani.Models.Database.Languages", b =>
                {
                    b.Navigation("LanguageTranslations");
                });

            modelBuilder.Entity("Yani.Models.Database.OrderStatuses", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Yani.Models.Database.Orders", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Yani.Models.Database.PaymentMethods", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Yani.Models.Database.Products", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Inventory");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductAttachments");

                    b.Navigation("ProductIngredient");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Yani.Models.Database.RefundStatuses", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("Yani.Models.Database.Reviews", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ReviewAttachments");
                });

            modelBuilder.Entity("Yani.Models.Database.ScentNote", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Yani.Models.Database.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Yani.Models.Database.States", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Yani.Models.Database.Subcategories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportCategories", b =>
                {
                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTicketStatuses", b =>
                {
                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("Yani.Models.Database.SupportTickets", b =>
                {
                    b.Navigation("SupportMessages");
                });

            modelBuilder.Entity("Yani.Models.Database.UserAddresses", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Yani.Models.Database.UserGroups", b =>
                {
                    b.Navigation("UserLogin");
                });

            modelBuilder.Entity("Yani.Models.Database.Users", b =>
                {
                    b.Navigation("AttachmentsCreatedByNavigation");

                    b.Navigation("AttachmentsUpdatedByNavigation");

                    b.Navigation("BlogsCreatedByNavigation");

                    b.Navigation("BlogsUpdatedByNavigation");

                    b.Navigation("BrandCreatedByNavigation");

                    b.Navigation("BrandUpdatedByNavigation");

                    b.Navigation("Carts");

                    b.Navigation("CategoriesCreatedByNavigation");

                    b.Navigation("CategoriesUpdatedByNavigation");

                    b.Navigation("CouponsCreatedByNavigation");

                    b.Navigation("CouponsUpdatedByNavigation");

                    b.Navigation("IngredientCreatedByNavigation");

                    b.Navigation("IngredientUpdatedByNavigation");

                    b.Navigation("InventoryCreatedByNavigation");

                    b.Navigation("InventoryUpdatedByNavigation");

                    b.Navigation("LanguageTranslationsCreatedByNavigation");

                    b.Navigation("LanguageTranslationsUpdatedByNavigation");

                    b.Navigation("OrderStatusesCreatedByNavigation");

                    b.Navigation("OrderStatusesUpdatedByNavigation");

                    b.Navigation("Orders");

                    b.Navigation("PaymentMethodsCreatedByNavigation");

                    b.Navigation("PaymentMethodsUpdatedByNavigation");

                    b.Navigation("ProductsCreatedByNavigation");

                    b.Navigation("ProductsUpdatedByNavigation");

                    b.Navigation("RefundStatusesCreatedByNavigation");

                    b.Navigation("RefundStatusesUpdatedByNavigation");

                    b.Navigation("RefundsCreatedByNavigation");

                    b.Navigation("RefundsUpdatedByNavigation");

                    b.Navigation("Reviews");

                    b.Navigation("ScentNoteCreatedByNavigation");

                    b.Navigation("ScentNoteUpdatedByNavigation");

                    b.Navigation("SizeCreatedByNavigation");

                    b.Navigation("SizeUpdatedByNavigation");

                    b.Navigation("SubcategoriesCreatedByNavigation");

                    b.Navigation("SubcategoriesUpdatedByNavigation");

                    b.Navigation("SupportCategoriesCreatedByNavigation");

                    b.Navigation("SupportCategoriesUpdatedByNavigation");

                    b.Navigation("SupportMessages");

                    b.Navigation("SupportTicketStatusesCreatedByNavigation");

                    b.Navigation("SupportTicketStatusesUpdatedByNavigation");

                    b.Navigation("SupportTicketsAdmin");

                    b.Navigation("SupportTicketsUser");

                    b.Navigation("UserAddresses");

                    b.Navigation("UserLoginCreatedByNavigation");

                    b.Navigation("UserLoginUpdatedByNavigation");

                    b.Navigation("UserLoginUser");

                    b.Navigation("WebsiteVisitors");
                });
#pragma warning restore 612, 618
        }
    }
}
